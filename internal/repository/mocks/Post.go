// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "news/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Post is an autogenerated mock type for the Post type
type Post struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: post
func (_m *Post) CreatePost(post models.Post) {
	_m.Called(post)
}

// Posts provides a mock function with given fields: quantity
func (_m *Post) Posts(quantity int) ([]models.Post, error) {
	ret := _m.Called(quantity)

	if len(ret) == 0 {
		panic("no return value specified for Posts")
	}

	var r0 []models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Post, error)); ok {
		return rf(quantity)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Post); ok {
		r0 = rf(quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPost creates a new instance of Post. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPost(t interface {
	mock.TestingT
	Cleanup(func())
}) *Post {
	mock := &Post{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
